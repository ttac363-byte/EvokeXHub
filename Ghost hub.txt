 local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "[üëª] Ghost Hub",
    SubTitle = "- leaked by ktro ",
    TabWidth = 160,
    Size = UDim2.fromOffset(430, 350),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Light",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "gamepad-2" }),
    Steal = Window:AddTab({ Title = "Steal", Icon = "landmark" }),
    Player = Window:AddTab({ Title = "Player", Icon = "person-standing" }),
    Esp = Window:AddTab({ Title = "Esp", Icon = "gamepad-2" }),
    Buy = Window:AddTab({ Title = "Buy", Icon = "shopping-bag" }),
    Server = Window:AddTab({ Title = "Server", Icon = "server" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    Note = Window:AddTab({ Title = "NOTE!", Icon = "shield-alert" }),
}
local Options = Fluent.Options

local Toggle = Tabs.Player:AddToggle("MyToggle", {
    Title = "‚ö°Speed Boost",
    Description = "You Need Invis Cloak In your inventory!",
    Default = false,
    Callback = function(state)
        task.spawn(function()
            local Config = {
                Speed = 72,
                NormalSpeed = 34,
            }

            local function SetSpeed(Humanoid, Speed)
                if Humanoid and Humanoid:FindFirstChild("WalkSpeed") then
                    Humanoid.WalkSpeed = Speed
                end
            end

            local function HookHumanoid(Humanoid)
                task.spawn(function()
                    SetSpeed(Humanoid, Config.NormalSpeed)
                end)

                local function OnPropertyChange(Object, Property, Callback)
                    Object:GetPropertyChangedSignal(Property):Connect(function()
                        Callback(Object[Property])
                    end)
                end

                OnPropertyChange(Humanoid, "WalkSpeed", function(WalkSpeed)
                    if WalkSpeed ~= Config.Speed then
                        SetSpeed(Humanoid, Config.Speed)
                    end
                end)
            end

            local function GetHumanoid()
                return game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
            end

            local Humanoid = GetHumanoid()

            if Humanoid then
                HookHumanoid(Humanoid)
            end

            game.Players.LocalPlayer.CharacterAdded:Connect(function(Character)
                Humanoid = Character:WaitForChild("Humanoid")
                HookHumanoid(Humanoid)
            end)

            if state then
                Config.Speed = 72
                if Humanoid then
                    SetSpeed(Humanoid, Config.Speed)
                end
            else
                Config.Speed = Config.NormalSpeed
                if Humanoid then
                    SetSpeed(Humanoid, Config.NormalSpeed)
                end
            end
        end)
    end
})

local Toggle = Tabs.Player:AddToggle("MyToggle", {
    Title = "üå†Max Speed Boost",
    Description = "You Need Invis Cloak & Speed Coil In your inventory!",
    Default = false,
    Callback = function(state)
        task.spawn(function()
            local Config = {
                Speed = 100,
                NormalSpeed = 34,
            }

            local function SetSpeed(Humanoid, Speed)
                if Humanoid and Humanoid:FindFirstChild("WalkSpeed") then
                    Humanoid.WalkSpeed = Speed
                end
            end

            local function HookHumanoid(Humanoid)
                task.spawn(function()
                    SetSpeed(Humanoid, Config.NormalSpeed)
                end)

                local function OnPropertyChange(Object, Property, Callback)
                    Object:GetPropertyChangedSignal(Property):Connect(function()
                        Callback(Object[Property])
                    end)
                end

                OnPropertyChange(Humanoid, "WalkSpeed", function(WalkSpeed)
                    if WalkSpeed ~= Config.Speed then
                        SetSpeed(Humanoid, Config.Speed)
                    end
                end)
            end

            local function GetHumanoid()
                return game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
            end

            local Humanoid = GetHumanoid()

            if Humanoid then
                HookHumanoid(Humanoid)
            end

            game.Players.LocalPlayer.CharacterAdded:Connect(function(Character)
                Humanoid = Character:WaitForChild("Humanoid")
                HookHumanoid(Humanoid)
            end)

            if state then
                Config.Speed = 100
                if Humanoid then
                    SetSpeed(Humanoid, Config.Speed)
                end
            else
                Config.Speed = Config.NormalSpeed
                if Humanoid then
                    SetSpeed(Humanoid, Config.NormalSpeed)
                end
            end
        end)
    end
})

local Toggle = Tabs.Player:AddToggle("MyToggle", {
    Title = "ü¶òInfinite Jump",
    Description = "Can Jump Infinitely Without a Limit! Just Spam the Spacebar",
    Default = false,
    Callback = function(state)
        _G.infinjump = state

        if _G.infinJumpStarted == nil then
            _G.infinJumpStarted = true

            Fluent:Notify({
                Title = "[üëª] Ghost Hub",
                Content = "Infinite Jump script is now active!",
                Duration = 6
            })

            local plr = game:GetService('Players').LocalPlayer
            local mouse = plr:GetMouse()

            mouse.KeyDown:Connect(function(key)
                if _G.infinjump then
                    if key:byte() == 32 then
                        local humanoid = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            humanoid:ChangeState("Jumping")
                            wait()
                            humanoid:ChangeState("Seated")
                        end
                    end
                end
            end)
        end

        if state then
            Fluent:Notify({
                Title = "[üëª] Ghost Hub",
                Content = "Infinite Jump Enabled ‚Äì Jump freely!",
                Duration = 5
            })
        else
            Fluent:Notify({
                Title = "[üëª] Ghost Hub",
                Content = "Infinite Jump Disabled.",
                Duration = 5
            })
        end
    end
})


Tabs.Steal:AddButton({
    Title = "üåÉTeleport to Sky",
    Callback = function()
        local Config = {
            Sky = 170,
            Ground = -5,
            SkyThreshold = 160,
        }

        local function GetRootPart()
            local char = game:GetService("Players").LocalPlayer.Character
            if char then
                return char:FindFirstChild("HumanoidRootPart")
            end
        end

        local RootPart = GetRootPart()
        if not RootPart then
            Fluent:Notify({
                Title = "[üëª] Ghost Hub",
                Content = "HumanoidRootPart not found!",
                Duration = 5
            })
            return
        end

        local RootPartCFrame = RootPart.CFrame

        local function Teleport(Y)
            local NewPosition = Vector3.new(RootPartCFrame.Position.X, Y, RootPartCFrame.Position.Z)
            RootPart.CFrame = CFrame.new(NewPosition) * CFrame.Angles(RootPartCFrame:ToEulerAnglesXYZ())
        end

        if RootPartCFrame.Position.Y >= Config.SkyThreshold then
            Teleport(Config.Ground)
            Fluent:Notify({
                Title = "[üëª] Ghost Hub",
                Content = "Teleporting to the ground.",
                Duration = 5
            })
        else
            Teleport(Config.Sky)
            Fluent:Notify({
                Title = "[üëª] Ghost Hub",
                Content = "Teleporting to the sky.",
                Duration = 5
            })
        end
    end
})

local Toggle = Tabs.Player:AddToggle("MyToggle", {
    Title = "üï¥Ô∏èAnti Ragdoll",
    Description = "Anti Ragdoll (you should know what this is!)",
    Default = false,
    Callback = function(state)
        local running = false
        local antiRagdollTask

        local function WaitForChild(parent, childName)
            return parent:WaitForChild(childName)
        end

        local function OnPropertyChange(instance, property, callback)
            instance:GetPropertyChangedSignal(property):Connect(function()
                callback(instance[property])
            end)
        end

        local function ForEachChild(parent, className, callback)
            for _, descendant in ipairs(parent:GetDescendants()) do
                if descendant:IsA(className) then
                    callback(descendant)
                end
            end
        end

        local function GetSelf()
            return game:GetService("Players").LocalPlayer
        end

        local function GetCharacter()
            return GetSelf().Character
        end

        if state then
            running = true
            antiRagdollTask = task.spawn(function()
                local Config = {
                    BlacklistedHumanoidStates = {
                        Enum.HumanoidStateType.Physics,
                        Enum.HumanoidStateType.Ragdoll,
                        Enum.HumanoidStateType.Dead,
                    },
                }

                local function HookCharacter(Character)
                    local RootPart = WaitForChild(Character, "HumanoidRootPart")
                    RootPart.CanCollide = true

                    OnPropertyChange(RootPart, "CanCollide", function(CanCollide)
                        if not CanCollide then
                            RootPart.CanCollide = true
                        end
                    end)

                    local RagdollClient = WaitForChild(Character, "RagdollClient")
                    RagdollClient.Enabled = false

                    OnPropertyChange(RagdollClient, "Enabled", function(Enabled)
                        if Enabled then
                            RagdollClient.Enabled = false
                        end
                    end)

                    local Humanoid = WaitForChild(Character, "Humanoid")

                    Humanoid.StateChanged:Connect(function(_, State)
                        if table.find(Config.BlacklistedHumanoidStates, State) then
                            Humanoid:ChangeState(Enum.HumanoidStateType.Running)
                        end
                    end)

                    for _, Child in ipairs(Character:GetChildren()) do
                        if not Child:IsA("MeshPart") and Child ~= RootPart then
                            continue
                        end

                        Child.Anchored = false

                        OnPropertyChange(Child, "Anchored", function(Anchored)
                            if Anchored then
                                Child.Anchored = false
                            end
                        end)

                        ForEachChild(Child, "Attachment", function(Attachment)
                            Attachment:Destroy()
                        end)
                    end
                end

                local Character = GetCharacter()

                if Character then
                    HookCharacter(Character)
                end

                GetSelf().CharacterAdded:Connect(function(Character)
                    HookCharacter(Character)
                end)
            end)
            Fluent:Notify({
                Title = "[üëª] Ghost Hub",
                Content = "Anti Ragdoll is now enabled.",
                Duration = 5
            })
        else
            running = false
            Fluent:Notify({
                Title = "[üëª] Ghost Hub",
                Content = "Anti Ragdoll is now disabled.",
                Duration = 5
            })
        end
    end
})

local Toggle = Tabs.Player:AddToggle("MyToggle", {
    Title = "‚ùåDisable All Screen Effects",
    Description = "Disable All Screen Effects Like Bee Launcher and Blur",
    Default = false,
    Callback = function(state)
        local Config = {
            BlacklistedObjects = {
                "BeeBlur",
                "ColorCorrection",
                "DiscoEffect",
                "Blur",
            },
        }

        local function Notify(title, text)
            Fluent:Notify({
                Title = title,
                Content = text,
                Duration = 5
            })
        end

        local function ForEachChild(parent, name, callback)
            for _, child in ipairs(parent:GetDescendants()) do
                if child.Name == name then
                    callback(child)
                end
            end
        end

        if state then
            task.spawn(function()
                for _, BlacklistedObject in ipairs(Config.BlacklistedObjects) do
                    ForEachChild(game.Lighting, BlacklistedObject, function(Object)
                        Notify("Blacklisted Lighting Effects", "Deleted " .. BlacklistedObject)
                        Object:Destroy()
                    end)
                end
            end)
            Fluent:Notify({
                Title = "[üëª] Ghost Hub",
                Content = "Disable All Screen Effects is now enabled.",
                Duration = 5
            })
        else
            Fluent:Notify({
                Title = "[üëª] Ghost Hub",
                Content = "Disable All Screen Effects is now disabled.",
                Duration = 5
            })
        end
    end
})


local Toggle = Tabs.Player:AddToggle("MyToggle", {
    Title = "‚ùåDisable All Animations",
    Description = "Disable All Animations Like Boogie Bomb",
    Default = false,
    Callback = function(state)
        task.spawn(function()
            local Config = {
                BlacklistedAnimations = {
                    "rbxassetid://109061983885712", -- Boogie Bomb
                },
            }

            local function Notify(title, text)
                Fluent:Notify({
                    Title = title,
                    Content = text,
                    Duration = 5
                })
            end

            local function WaitForChild(parent, childName)
                return parent:WaitForChild(childName)
            end

            local function GetSelf()
                return game:GetService("Players").LocalPlayer
            end

            local function GetHumanoid()
                local char = GetSelf().Character
                if char then
                    return char:FindFirstChildOfClass("Humanoid")
                end
            end

            local function HookHumanoid(Humanoid)
                Humanoid.AnimationPlayed:Connect(function(Animation)
                    local Id = Animation.Animation.AnimationId
                    if table.find(Config.BlacklistedAnimations, Id) then
                        Notify("Blacklisted Animations", "Stopped " .. Id)
                        Animation:Stop()
                    end
                end)
            end

            if state then
                local Humanoid = GetHumanoid()
                if Humanoid then
                    HookHumanoid(Humanoid)
                end

                GetSelf().CharacterAdded:Connect(function(Character)
                    local Humanoid = WaitForChild(Character, "Humanoid")
                    HookHumanoid(Humanoid)
                end)

                Fluent:Notify({
                    Title = "[üëª] Ghost Hub",
                    Content = "Disable All Animations is now enabled.",
                    Duration = 5
                })
            else
                Fluent:Notify({
                    Title = "[üëª] Ghost Hub",
                    Content = "Disable All Animations is now disabled.",
                    Duration = 5
                })
            end
        end)
    end
})

local Toggle = Tabs.Player:AddToggle("MyToggle", {
    Title = "üêùAnti Bee Launcher",
    Description = "Anti Bee Launcher Disables Bee Launcher",
    Default = false,
    Callback = function(state)
        task.spawn(function()
            local function ForEachChild(parent, className, callback)
                for _, descendant in ipairs(parent:GetDescendants()) do
                    if descendant:IsA(className) then
                        callback(descendant)
                    end
                end
            end

            local function Notify(title, text)
                Fluent:Notify({
                    Title = title,
                    Content = text,
                    Duration = 5
                })
            end

            local function GetSelf()
                return game:GetService("Players").LocalPlayer
            end

            local function GetCharacter()
                return GetSelf().Character
            end

            local function WaitForChild(parent, childName)
                return parent:WaitForChild(childName)
            end

            local function FindChild(parent, childName)
                local current = parent
                for part in childName:gmatch("[^/]+") do
                    if current then
                        current = current:FindFirstChild(part)
                    else
                        return nil
                    end
                end
                return current
            end

            local function HookHead(Head)
                ForEachChild(Head, "ParticleEmitter", function(ParticleEmitter)
                    Notify("Anti Bee Launcher", "Deleted ParticleEmitter")
                    ParticleEmitter:Destroy()
                end)
            end

            if state then
                local Head = FindChild(GetCharacter(), "Head")
                if Head then
                    HookHead(Head)
                end

                GetSelf().CharacterAdded:Connect(function(Character)
                    local Head = WaitForChild(Character, "Head")
                    HookHead(Head)
                end)

                Fluent:Notify({
                    Title = "[üëª] Ghost Hub",
                    Content = "Anti Bee Launcher is now enabled.",
                    Duration = 5
                })
            else
                Fluent:Notify({
                    Title = "[üëª] Ghost Hub",
                    Content = "Anti Bee Launcher is now disabled.",
                    Duration = 5
                })
            end
        end)
    end
})


local Toggle = Tabs.Player:AddToggle("MyToggle", {
    Title = "üí§Anti AFK",
    Description = "Anti AFK so you don't get kicked",
    Default = false,
    Callback = function(state)
        local Players = game:GetService("Players")
        local VirtualUser = game:GetService("VirtualUser")
        local LocalPlayer = Players.LocalPlayer

        if not _G.AfkConnection then _G.AfkConnection = nil end

        if state then
            _G.AfkConnection = LocalPlayer.Idled:Connect(function()
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
            end)
            Fluent:Notify({
                Title = "[üëª] Ghost Hub",
                Content = "Anti AFK is now enabled.",
                Duration = 5
            })
        else
            if _G.AfkConnection then
                _G.AfkConnection:Disconnect()
                _G.AfkConnection = nil
            end
            Fluent:Notify({
                Title = "[üëª] Ghost Hub",
                Content = "Anti AFK is now disabled.",
                Duration = 5
            })
        end
    end
})

local Toggle = Tabs.Buy:AddToggle("MyToggle", {
    Title = "ü™ì Auto Buy Essentials",
    Description = "Auto Buy Essentials For Auto Stealing, Stealing Normally, Also for Speed boost",
    Default = false,
    Callback = function(state)
        local function Notify(Title, Text, Duration)
            local StarterGui = game:GetService("StarterGui")
            StarterGui:SetCore("SendNotification", {
                Title = Title or "Notification",
                Text = Text,
                Duration = Duration or 0,
            })
        end

        local function FindChild(Parent, Path)
            if type(Parent) ~= "table" and not Parent:IsA("Instance") then
                return
            end
            local Current = Parent
            for ChildName in string.gmatch(Path, "[^/]+") do
                if not Current then return end
                Current = Current:FindFirstChild(ChildName)
            end
            return Current
        end

        local function GetBackpack()
            return game.Players.LocalPlayer:FindFirstChild("Backpack")
        end

        local function EquipTool(Tool)
            if Tool and Tool:IsA("Tool") then
                local Humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
                if Humanoid then
                    Humanoid:EquipTool(Tool)
                end
            end
        end

        local function ActivateTool(Tool)
            if Tool and Tool:IsA("Tool") then
                Tool:Activate()
            end
        end

        local function MainScript()
            local Config = {
                Interval = 0.6,
                Items = {
                    "Invisibility Cloak",
                    "Medusa's Head",
                    "Quantum Cloner",
                    "Body Swap Potion",
                    "Web Slinger",
                    "Trap",
                },
                Equip = "Invisibility Cloak",
            }

            task.spawn(function()
                if not (Config.Equip and Config.Equip ~= "") then
                    return
                end

                local function GetTool()
                    return FindChild(GetBackpack(), Config.Equip)
                end

                local function EquipAndActivateTool()
                    local Tool = GetTool()

                    while not Tool and task.wait() do
                        Tool = GetTool()
                    end

                    EquipTool(Tool)
                    ActivateTool(Tool)
                    Notify("Shop", "Activated " .. Config.Equip)
                end

                EquipAndActivateTool()
                game.Players.LocalPlayer.CharacterAdded:Connect(EquipAndActivateTool)
            end)

            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local Net = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Net")
            local Buy = Net:WaitForChild("RF/CoinsShopService/RequestBuy")

            for _, Item in ipairs(Config.Items) do
                task.wait(Config.Interval)
                Buy:InvokeServer(Item)
                Notify("Shop", "Purchased " .. Item)
            end
        end

        if state then
            MainScript()
            Notify("Shop", "Auto Buy Essentials is now enabled.", 5)
        else
            Notify("Shop", "Auto Buy Essentials is now disabled.", 5)
        end
    end
})

local jobId = ""

local Input = Tabs.Server:AddInput("Input", {
    Title = "Enter Job ID",
    Default = "Enter Job ID",
    Placeholder = "e.g., 07431dbd-8ae7-417e-a242-e5a01a33c740",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        jobId = Value
    end
})

Tabs.Server:AddButton({
    Title = "Join Job ID",
    Callback = function()
        if jobId ~= "" then
            local placeId = game.PlaceId
            local currentJobId = game.JobId

            if jobId == currentJobId then
                Fluent:Notify({
                    Title = "[‚úÖ] Already in the Server",
                    Content = "You are already in the server with this Job ID.",
                    Duration = 5
                })
            else
                local success, errorMessage = pcall(function()
                    TeleportService:TeleportToPlaceInstance(placeId, jobId, Players.LocalPlayer)
                end)

                if not success then
                    Fluent:Notify({
                        Title = "[‚ö†Ô∏è] Error",
                        Content = "Failed to teleport to the specified Job ID: " .. errorMessage,
                        Duration = 5
                    })
                else
                    Fluent:Notify({
                        Title = "[üöÄ] Teleporting",
                        Content = "Attempting to join Job ID: " .. jobId,
                        Duration = 5
                    })
                end
            end
        else
            Fluent:Notify({
                Title = "[‚ö†Ô∏è] Error",
                Content = "Please enter a valid Job ID.",
                Duration = 5
            })
        end
    end
})

Tabs.Server:AddButton({
    Title = "Clear Job ID",
    Callback = function()
        jobId = ""
        Input:SetValue("")

        Fluent:Notify({
            Title = "[‚úîÔ∏è] Cleared",
            Content = "Job ID has been cleared.",
            Duration = 5
        })
    end
})

Tabs.Server:AddButton({
    Title = "Copy Job ID",
    Description = "Copies Your Server Job Id to Clipboard",
    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        local function copyToClipboard(text)
            if setclipboard then
                setclipboard(text)
            else
                warn("setclipboard is not available in this environment.")
            end
        end

        local jobId = game.JobId

        copyToClipboard(jobId)

        Fluent:Notify({
            Title = "[‚úîÔ∏è] Success",
            Content = "Job ID copied to clipboard: " .. jobId,
            Duration = 5
        })
    end
})

local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local placeId = game.PlaceId
local currentJobId = game.JobId

local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local placeId = game.PlaceId
local currentJobId = game.JobId

Tabs.Server:AddButton({
    Title = "Server Hop",
    Description = "Teleports you to a different server in the same game",
    Callback = function()
        local success, errorMessage = pcall(function()
            local servers = {} 
            local newJobId = "new_job_id_example"  -- You would dynamically get this in your system

            if newJobId ~= currentJobId then
                TeleportService:TeleportToPlaceInstance(placeId, newJobId, Players.LocalPlayer)
                Fluent:Notify({
                    Title = "[üöÄ] Server Hopping",
                    Content = "Attempting to hop to a new server...",
                    Duration = 5
                })
            else
                Fluent:Notify({
                    Title = "[‚úÖ] Already in a Different Server",
                    Content = "You are already in a different server.",
                    Duration = 5
                })
            end
        end)

        if not success then
            if errorMessage:match("Error Code: 773") then
                Fluent:Notify({
                    Title = "[‚ö†Ô∏è] Teleport Error",
                    Content = "The game instance cannot be joined (Error Code 773). Please try again later.",
                    Duration = 5
                })
            else
                Fluent:Notify({
                    Title = "[‚ö†Ô∏è] Error",
                    Content = "An error occurred while attempting to hop to a new server: " .. errorMessage,
                    Duration = 5
                })
            end
        end
    end
})




-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "[üëª] Ghost Hub",
    Content = "Thank you for executing/loading [üëª] Ghost Hub",
    Duration = 10
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
